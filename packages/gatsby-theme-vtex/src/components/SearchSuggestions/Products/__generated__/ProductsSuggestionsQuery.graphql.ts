/**
 * Warning: This is an autogenerated file.
 *
 * Changes in this file won't take effect and will be overwritten
 */

// Base Types
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
type Maybe<T> = T | null | undefined
type Scalars = {
  Boolean: boolean
  String: string
  Float: number
  Int: number
}

// Operation related types
export type ProductsSuggestionsQueryQueryVariables = Exact<{
  fullText: Scalars['String']
  facetKey: Maybe<Scalars['String']>
  facetValue: Maybe<Scalars['String']>
  productOriginVtex?: Maybe<Scalars['Boolean']>
  simulationBehavior?: Maybe<Vtex_SimulationBehavior>
}>

export type ProductsSuggestionsQueryQuery = {
  vtex: {
    productSuggestions: Maybe<{
      count: number
      products: Array<
        Maybe<{
          productId: Maybe<string>
          productName: Maybe<string>
          description: Maybe<string>
          linkText: Maybe<string>
          key: Maybe<string>
          items: Maybe<
            Array<
              Maybe<{
                itemId: Maybe<string>
                images: Maybe<
                  Array<
                    Maybe<{ imageUrl: Maybe<string>; imageText: Maybe<string> }>
                  >
                >
                sellers: Maybe<
                  Array<
                    Maybe<{
                      sellerId: Maybe<string>
                      commertialOffer: Maybe<{
                        AvailableQuantity: Maybe<number>
                        Price: Maybe<number>
                        ListPrice: Maybe<number>
                      }>
                    }>
                  >
                >
              }>
            >
          >
        }>
      >
    }>
  }
}

// Query Related Code

export const ProductsSuggestionsQuery = {
  query: undefined,
  sha256Hash:
    '2e4d14cc865edbb3a6778f368d32dd047c53fbf41f1477ff927422f8489b2030',
  operationName: 'ProductsSuggestionsQuery',
}
